from pathlib import Path
import sys

sys.path.append(str(Path(__file__).parents[1]))


import json
from copy import deepcopy

from prompting.structured.json_utils import (
    enclose_in_json,
    enclose_in_code_blocks,
)

from prompting.utils import (
    form_query_text,
    form_response_text,
    create_prompt_text,
    create_prompt_messages,
)


def json_to_text(json_obj, json_enclosure=True, code_block_enclosure=True):
    if json_enclosure:
        json_obj = enclose_in_json(json_obj)

    text = json.dumps(json_obj)
    if code_block_enclosure:
        text = enclose_in_code_blocks(text, block_name="json")

    return text


def exemplar_json_to_text(
    exemplars,
    json_key="extraction",
    json_enclosure=True,
    code_block_enclosure=True,
    inplace=True,
):
    was_dict = False
    if isinstance(exemplars, dict):
        was_dict = True
        exemplars = [exemplars]

    output = exemplars
    if not inplace:
        output = deepcopy(exemplars)

    if json_key:
        for i in range(len(output)):
            output[i][json_key] = json_to_text(
                output[i][json_key],
                json_enclosure=json_enclosure,
                code_block_enclosure=code_block_enclosure,
            )

    else:
        for i in range(len(output)):
            output[i] = json_to_text(
                output[i],
                json_enclosure=json_enclosure,
                code_block_enclosure=code_block_enclosure,
            )

    if was_dict and len(output):
        output = output[0]

    return output


def prepare_prompt_inputs(
    batch,
    system_prompt="",
    exemplars=None,
    k=1,
    random=True,
    query_key="document",
    response_key="extraction",
    return_as_text=False,
):
    if isinstance(batch, str):
        batch = [batch]

    prompt_inputs = []
    for txt in batch:
        contents = []

        if exemplars:
            contents += [
                {
                    "query": form_query_text(context=ex[query_key]),
                    "response": form_response_text(response=ex[response_key]),
                }
                for ex in exemplars.sample(k=k, random=random)
            ]

        contents.append({"query": txt})

        if return_as_text:
            system_prompt = system_prompt.strip() + "\n\n"
            for c in contents:
                c["query"] += "\n\n"

            contents = create_prompt_text(
                contents=contents,
                query_key="query",
                response_key="response",
                system_text=system_prompt,
                with_last_response=False,  # last is test content
            )

        else:
            contents = create_prompt_messages(
                contents=contents,
                user_key="query",
                model_key="response",
                system_content=system_prompt,
                with_last_model_content=False,  # last is test content
            )

        prompt_inputs.append(contents)

    if len(prompt_inputs) == 1:
        prompt_inputs = prompt_inputs[0]
    return prompt_inputs
